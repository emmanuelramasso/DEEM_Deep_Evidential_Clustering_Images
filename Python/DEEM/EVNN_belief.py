from EVNN_config import NUMCLASSES
import torch 
import numpy as np 

##############################################################################
# TO TRANSFORM A BBA INTO PL CONTOUR 
##############################################################################

def bbas2plcontour(bba):

    numclasses = NUMCLASSES
    usedoute = True
    usepaires = True
    positionDoute = numclasses + 2 # conflict first
    positionClasse1 = 2 - 1
    positionClasseK = positionClasse1 + numclasses - 1

    if numclasses==10:
        forDecision = np.array([
            [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 1, 0, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 1, 0, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
            [1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
            [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
            ])
        
    elif numclasses == 7:
        forDecision = np.array([
            [1,   1,   0,   0,   0,   0,   0],
            [1,   0,   1,   0,   0,   0,   0],
            [1,   0,   0,   1,   0,   0,   0],
            [1,   0,   0,   0,   1,   0,   0],
            [1,   0,   0,   0,   0,   1,   0],
            [1,   0,   0,   0,   0,   0,   1],
            [0,   1,   1,   0,   0,   0,   0],
            [0,   1,   0,   1,   0,   0,   0],
            [0,   1,   0,   0,   1,   0,   0],
            [0,   1,   0,   0,   0,   1,   0],
            [0,   1,   0,   0,   0,   0,   1],
            [0,   0,   1,   1,   0,   0,   0],
            [0,   0,   1,   0,   1,   0,   0],
            [0,   0,   1,   0,   0,   1,   0],
            [0,   0,   1,   0,   0,   0,   1],
            [0,   0,   0,   1,   1,   0,   0],
            [0,   0,   0,   1,   0,   1,   0],
            [0,   0,   0,   1,   0,   0,   1],
            [0,   0,   0,   0,   1,   1,   0],
            [0,   0,   0,   0,   1,   0,   1],
            [0,   0,   0,   0,   0,   1,   1]
            ])
        
    else:
        raise ValueError('Bad nb classes')
    
    forDecision = torch.tensor(forDecision, dtype=torch.float32).to(device=bba.device)

    pl   = bba[:, positionClasse1:positionClasseK+1] # conflict first, pl init mass on singletons
    pl   = pl   + bba[:, positionDoute].view(-1, 1) # ajoute doute
    for i in range(numclasses): # ajoute subsets
        d = forDecision[:,i].view(1, -1)
        pl[:,i]   += torch.sum(d * bba[:, positionDoute:], dim=1)
    
    return pl
