# Thsi file open the performance.csv file generated by run_eval.multiple.sh (calling Contrastive_DML_eval.py)
# and plot the ARI, NMI, ACC on train and test set (generalisation) over epoch of DML training.
# Supposes there is a header.
# File is organised as 
# {modelnamefile},{priorqty},{ari_train},{ami_train},{acc_train},{ari_test},{ami_test},{acc_test}
#
# python3 trace_perf.py -r /path/to/root/folder
# python3 trace_perf.py -r '/home/emmanuel.ramasso/Documents/PROGRAMMES/GITHUB/Evidential_neural_network_clustering/MATLAB/test_triplet_constrative/DML_MNIST_prior_margin8/'
#
# E. Ramasso, FEMTO-ST, helped by ChatGPT, 2024
#

import os
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import argparse
import glob 

def plot_performance(data_path):
    """
    Function to read a performance.csv file and plot ARI, NMI, ACC.
    """
    print(f"Processing {data_path}")
    data = pd.read_csv(data_path, header=0)

    # Generate x as a sequence from 1 to the number of rows
    x = np.arange(1, len(data) + 1)

    # Extract numeric columns
    y1 = data.iloc[:, 2]  # ARI train
    y2 = data.iloc[:, 3]  # aNMI train
    y3 = data.iloc[:, 4]  # ACC train
    y4 = data.iloc[:, 5]  # ARI test
    y5 = data.iloc[:, 6]  # aNMI test
    y6 = data.iloc[:, 7]  # ACC test

    # Plot the data
    plt.figure(figsize=(10, 6))
    plt.plot(x, y1, label='ARI train', marker='o')
    plt.plot(x, y2, label='aNMI train', marker='^')
    plt.plot(x, y3, label='ACC train', marker='*')
    plt.plot(x, y4, label='ARI test', marker='o')
    plt.plot(x, y5, label='aNMI test', marker='^')
    plt.plot(x, y6, label='ACC test', marker='*')

    # Customize plot
    plt.xlabel('Numéro du modèle (epoch)')
    plt.ylabel('Performance')
    plt.title(f"Performance Metrics - {os.path.basename(data_path)}")
    plt.legend()
    plt.grid(True)
    save_path = os.path.join(os.path.dirname(data_path), f"{os.path.basename(data_path).split('.csv')[0]}_plot.png")
    plt.savefig(save_path, bbox_inches='tight')
    print(f"Figure saved to {save_path}")
    #plt.show()
    #plt.pause(1.0) 
    #plt.close()

def process_folders(root_folder):
    """
    Iterate through all folders in the root folder and process performance_metrics_*.csv files.
    """
    for folder in os.listdir(root_folder):
        folder_path = os.path.join(root_folder, folder)
        if os.path.isdir(folder_path):  # Only process folders
            # Use glob to find all files matching the pattern
            csv_files = glob.glob(os.path.join(folder_path, "performance_metrics_*.csv"))
            if csv_files:
                for csv_file in csv_files:
                    plot_performance(csv_file)
            else:
                print(f"No performance_metrics_*.csv found in {folder_path}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-r', '--root', required=True, type=str, help='Root folder containing subfolders with performance.csv')
    args = parser.parse_args()

    # Call the process_folders function
    process_folders(args.root)
